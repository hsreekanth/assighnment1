Generating own ssl certificate    on ubuntu  :

1.To do this, we’ll use the openssl utility. You likely have this installed already, as it’s a dependency of Nginx. If not installed ,then install manually using the command 

         $ sudo apt-get install openssl

2.After openssl is installed, you can generate the certificate with the following command:

    $ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx.key-out /etc/ssl/certs/nginx.crt

3. Below is the explanation for the options that we used in the above command :

    $ openssl - > This is a command line tool to create the certificates and keys.
-req - > X.509 is a public key infrastructure standard for the SSL the ‘req’ is the sub command which allows to specify the standards for the SSL, the –x509 specifies that we want to generate self-signed certificate instead of generating the certificate signed.
-nodes - > As we want to read the Nginx to read the certificate file with our any password or user interventions, if we don’t use this command the it will ask for a passphrase.
-days 35 -> This will set the validity of the certificate for one year.
-newkey rsa:2048 - > This option specifies that we will generate a new certificate and key with 2048 bit encryption.
-keyout -> This will tell the OpenSSL to place private key which is generated.
-out -> This will tell the OpenSSL to place the certificate file which is generated.



4.During this command execution, it will prompt us to provide the domain/client details for generating a Certificate Signing Request (CSR). You can provide these details as required.

5.Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:Victoria
Locality Name (eg, city) []:Melbourne
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Linoxide LLC
Organizational Unit Name (eg, section) []:Web
Common Name (e.g. server FQDN or YOUR name) []:example.com
Email Address []:xxxxxxx@example.com


6. It Will generate a new RSA private key, used to sign the certificate, and store it in /etc/ssl/private/nginx.key. The certificate itself is stored in /etc/ssl/certs/nginx.crt, and is valid for an entire year.

7.We’ll also want to generate a Diffie-Hellman group. This is used for perfect forward secrecy.

    $ sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096


8.Configure Nginx to Use Your Private Key and SSL Certificate

      $ touch /etc/nginx/snippets/self-signed.conf
9. Open it up in your favorite text editor, and paste the following in 

ssl_certificate /etc/ssl/certs/nginx.crt;
ssl_certificate_key /etc/ssl/private/nginx.key;

ssl_protocols TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
ssl_session_timeout 10m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";

ssl_dhparam /etc/nginx/dhparam.pem;
ssl_ecdh_curve secp384r1;


10.Now, modify your primary nginx configuration (usually located at /etc/nginx/nginx.conf for single sites, or under your domain name in /etc/nginx/sites-available for multi-site servers), and source the snippet:

we ’ll also want to set up a redirect from HTTP to HTTPS, which you can do with an additional server block listening on port 80


server {
    listen 80;
    listen [::]:80;

    server_name example.com www.example.com;

    return 302 https://$server_name$request_uri;
}

11.Test your configuration by restarting nginx
     
        $ sudo service nginx restart


12.Because HTTPS traffic uses port 443, you’ll need to configure your firewalls to allow transport over that port. If you’re using iptables or UFW, you’ll need to open ports from the command line. 
If you’re using a hosting service like AWS that has a built in firewall, you’ll need to also open them from their web interface.


If everything works correctly, you should now be able to access your server over HTTPS. Your web browser may display a warning like this:

  Your connection is not private


Don’t worry, this is expected, and the reason why you can’t use these certificates for client-facing websites. You’ll have to manually confirm that you trust the server in order to access it.


Once you’ve verified that there are no issues with SSL, you can switch the HTTP redirect to a 301 redirect:

    $ return 301 https://$server_name$request_uri;


